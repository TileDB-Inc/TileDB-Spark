buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'signing'
    id 'com.github.sherter.google-java-format' version '0.7.1'
    id "com.github.johnrengelman.shadow" version "4.0.4"
}

group 'io.tiledb'
version '0.0.3'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

sourceSets {
    main {
        java {
            srcDir 'main/java'
        }
    }
    test {
        java {
            srcDir 'test/java'
        }
    }
}

dependencies {
    compile 'org.apache.spark:spark-sql_2.12:2.4.3'
    compile 'org.apache.spark:spark-core_2.12:2.4.3'

    compile 'io.tiledb:tiledb-java:0.2.0'

    compile 'commons-beanutils:commons-beanutils:1.9.4'

    compile group: 'com.github.oshi', name: 'oshi-core', version: '4.0.0'
    compile group: 'io.dropwizard.metrics', name: 'metrics-core', version: '4.1.0'

    testCompile group: 'junit', name: 'junit', version: '4.11'
}

test {
    systemProperty "java.library.path", new File(buildDir, "TileDB-Java/build/tiledb_jni")
    testLogging {
        showStandardStreams = true
    }
}

// metrics.jar
task metricsJar(type: Jar) {
    baseName = "tiledb-spark-metrics"
    from(sourceSets.main.output) {
        include "org/apache/spark/metrics/**"
    }
}

assemble.dependsOn(metricsJar)

task getHomeDir {
    doLast {
        println gradle.gradleHomeDir
    }
}

tasks.jar.configure {
    classifier = 'default'
}

tasks.shadowJar.configure {
    classifier = null
}

import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat
import com.github.sherter.googlejavaformatgradleplugin.VerifyGoogleJavaFormat

task format(type: GoogleJavaFormat) {
    source = sourceSets*.allJava
    include '**/*.java'
}

task checkFormat(type: VerifyGoogleJavaFormat) {
    source = sourceSets*.allJava
    include '**/*.java'
    ignoreFailures false
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}
