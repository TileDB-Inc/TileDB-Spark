# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
  branches:
    include:
      - master
      - release-*
  tags:
    include:
      - "*"

stages:
  - stage: CI
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags'))
    jobs:
      - job: Linux
        strategy:
          matrix:
            ubuntu_18:
              imageName: 'ubuntu-18.04'
            macOS:
              imageName: 'macOS-10.14'
        pool:
          vmImage: $(imageName)
        steps:
          - template: ci/tiledb-spark-linux.yml

  - stage: GitHubRelease
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags')
    jobs:
      - job: All_OS
        strategy:
          matrix:
            ubuntu_18:
              imageName: 'ubuntu-18.04'
        pool:
          vmImage: $(imageName)

        steps:

          - bash: |
              unset SYSTEM
              set +e

              ./gradlew assemble
              ./gradlew shadowJar

              mkdir $BUILD_BINARIESDIRECTORY/jars
              cp ./build/libs/*.jar $BUILD_BINARIESDIRECTORY/jars

          - task: GithubRelease@0
            displayName: 'GitHub Release'
            inputs:
              gitHubConnection: github_tiledb
              repositoryName: TileDB-Inc/TileDB-Spark
              tag: $(Build.SourceBranchName)
              action: "edit"
              assets: $(Build.BinariesDirectory)/jars/*.jar

  - stage: FinalJar
    condition: or( eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
    jobs:
      - job: All_OS
        strategy:
          matrix:
            ubuntu_latest:
              imageName: 'ubuntu-latest'
            ubuntu_16:
              imageName: 'ubuntu-16.04'
        pool:
          vmImage: $(imageName)
        steps:
          - bash: |
              ./ci/upload_to_maven.sh
            env:
              GPG_KEY_ID: $(GPG_KEY_ID)
              GPG_PASSPHRASE: $(GPG_PASSPHRASE)
              GPG_SECRET_KEYS_ENC: $(GPG_SECRET_KEYS_ENC)
              SONATYPE_USERNAME: $(SONATYPE_USERNAME)
              SONATYPE_PASSWORD: $(SONATYPE_PASSWORD)
            displayName: "Publish to Maven"
